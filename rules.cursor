# General Project Rules for pyHaasAPI

[market_naming]
# All market tags must use the format: <EXCHANGE>_<BASE>_<QUOTE>_
# Example: BINANCE_BTC_USDT_
# This is enforced in CloudMarket.format_market_tag and CreateLabRequest.with_generated_name.
# When creating or referencing a market in lab, bot, or backtest requests, always use this format.
# Do not add extra fields or change the separator.
# Document any exceptions in 'docs/lab_workflows.md'.

[market_fetching_optimization]
# CRITICAL: Always use exchange-specific market fetching instead of get_all_markets()
# 
# 
 AVOID: api.get_all_markets(executor) - Slow, unreliable, causes 504 timeouts
# 
 USE: PriceAPI.get_trade_markets(exchange) - Fast, reliable, per-exchange error handling
#
# Implementation pattern:
# from pyHaasAPI.price import PriceAPI
# price_api = PriceAPI(executor)
# exchanges = ["BINANCE", "KRAKEN"]  # Skip COINBASE (has issues)
# for exchange in exchanges:
#     try:
#         markets = price_api.get_trade_markets(exchange)
#         all_markets.extend(markets)
#     except Exception as e:
#         print(f"Failed to get {exchange} markets: {e}")
#         continue
#
# Performance: 10x faster than get_all_markets(), avoids server overload
# Reliability: Individual exchange failures don't break entire operation
# Compatibility: BINANCE/KRAKEN work, COINBASE has invalid pricesource errors
# Documentation: See docs/lab_workflows.md for complete guide

[python]
python_version = "3.11"
type_hints = true
indent_style = "space"
indent_size = 4
max_line_length = 100
require_docstrings = true
logging_library = "loguru"
test_framework = "pytest"
test_directory = "tests"
env_file = ".env"
env_example_file = "env.example"
ignore_patterns = [
    ".env",
    ".venv",
    "__pycache__",
    "pyHaasAPI.egg-info",
    "dist",
    "env.example",
    ".DS_Store"
]
dependency_files = [
    "requirements.txt",
    "pyproject.toml"
]
experiments_directory = "experiments"
documentation_directory = "docs"
examples_directory = "examples"

# All new code should be accompanied by at least minimal doc tests or usage examples.
# Use rapidfuzz for fuzzy search (as seen in textual_backtester.py).
# Use Git for version control. Do not commit large data files or secrets.
# All contributions should be made via pull requests and reviewed before merging.
# Follow semantic versioning for releases.
# Use 'ALL CAPS' for constants.
# Use snake_case for variables and functions, PascalCase for classes.
# Use relative imports within the pyHaasAPI package.
# All API interaction should be wrapped in error handling with custom exceptions.
# All scripts should have a main guard (if __name__ == "__main__":).

[architecture]
core_package = "pyHaasAPI"
# Organize code by responsibility:
# - API communication in 'pyHaasAPI/api/'
# - Data models in 'pyHaasAPI/models/'
# - Business logic in 'pyHaasAPI/' (e.g., parameters.py, lab.py)
# - Client logic in 'pyHaasAPI/client/'
# - Utilities and extensions in dedicated modules (e.g., iterable_extensions.py)
experiments_directory = "experiments"
examples_directory = "examples"
documentation_directory = "docs"
test_directory = "tests"
relative_imports = true
single_responsibility = true
data_validation_library = "pydantic"
# API error handling must use custom exceptions defined in 'pyHaasAPI/exceptions.py'.
# Logging must use 'loguru' and be centralized in 'pyHaasAPI/logger.py'.
# All scripts and entry points must have a main guard (if __name__ == "__main__":).
# No business logic in the root directory; only entry points, config, and documentation.
# All new features should be accompanied by documentation and tests.
# All architectural changes must be documented in 'docs/lab_workflows.md'.

[api_endpoints]
# All API endpoint names must end with 'API' (e.g., 'LabsAPI', 'AccountAPI') when constructing URLs or endpoint strings.
# This is critical for compatibility with the HaasOnline API and is enforced in the codebase (see pyHaasAPI/api.py).
# Example: url = f"{self.protocol}://{self.host}:{self.port}/{endpoint}API.php"
# When adding new endpoints or refactoring, always ensure the 'API' suffix is present.
# This convention ensures all API requests are routed correctly and consistently.
# Document any exceptions or changes to this rule in 'docs/lab_workflows.md'.

[api_discovery_rules]
# Based on reverse engineering from lab_parameters.py and other examples:

[authentication]
# Authentication requires two-step process:
# 1. LOGIN_WITH_CREDENTIALS - email, password, interfaceKey (random 10-digit string)
# 2. LOGIN_WITH_ONE_TIME_CODE - email, pincode (random 6-digit), interfaceKey
# Always use RequestsExecutor.authenticate() method for proper state management.
# Interface key must be consistent across both authentication steps.

[parameter_handling]
# LabParameter objects use these field mappings:
# - key (alias: "K") - Parameter identifier
# - type (alias: "T") - ParameterType enum value (0=INTEGER, 1=DECIMAL, 2=BOOLEAN, 3=STRING, 4=SELECTION)
# - options (alias: "O") - List of possible values as strings
# - is_enabled (alias: "I") - Boolean for parameter availability
# - is_selected (alias: "IS") - Boolean for parameter selection state
# Always use LabParameter properties: current_value, possible_values, display_name, group_path
# ParameterRange constructor only accepts: start, end, step (no decimals parameter)
# See docs/lab_workflows.md for parameter update and mapping details.

[lab_management]
# Lab creation workflow:
# 1. Get scripts via GET_ALL_SCRIPT_ITEMS
# 2. Get accounts via GET_ACCOUNTS
# 3. Get markets via MARKETLIST
# 4. Create lab via CREATE_LAB with scriptId, name, accountId, market, interval, style
# 5. Extract lab_id from response.lab_id (not response.LID)
# 6. Get parameters via GET_LAB_DETAILS
# 7. Update parameters via UPDATE_LAB_DETAILS
# 8. Clean up via DELETE_LAB
# LabDetails response includes: parameters, config, settings, lab_id, script_id, name, status
# See docs/lab_workflows.md for full workflow and troubleshooting.

[api_response_structure]
# All API responses are wrapped in ApiResponse<T> with:
# - Success: bool - Request success status
# - Error: str - Error message if failed
# - Data: Optional[T] - Response data
# Use response.success, response.error, response.data properties
# LabDetails uses populate_by_name=True for flexible field mapping
# Parameters in responses are dictionaries with K, T, O, I, IS keys

[error_handling]
# Always wrap API calls in try/except blocks
# Use HaasApiError for API-specific exceptions
# Log all API requests and responses for debugging
# Implement proper cleanup in finally blocks for resource management
# Handle authentication failures gracefully with retry logic

[testing_guidelines]
# Use examples/lab_parameters.py as reference for API testing
# Always create test labs with random names (PNL_Test_XXXX)
# Clean up test resources after testing
# Log all API interactions for debugging
# Test parameter updates and verify changes
# Use random accounts and markets for testing
# See docs/lab_workflows.md for up-to-date testing and workflow practices.

[robust_headers]
# For API calls, only use browser-matching headers and robust POST logic for endpoints that are known to require it (e.g., START_LAB_EXECUTION).
# For all other endpoints, use the default executor logic unless issues are observed.
# Document any exceptions or changes to this rule in 'docs/lab_workflows.md'.

# Add new rules here as the project evolves. 