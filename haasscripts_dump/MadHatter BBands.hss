-- Define command
DefineCommand("MadHatterBBands", "Custom BBands signal implementation for MadHatter")

-- Define command parameters.
local chartIndex = DefineParameter(NumberType, 'chartIndex', 'The index on which to chart', true, 0, 'Number')
local name = DefineParameter(StringType, 'name', 'Unique name of the indicator.', false, '', 'Text')
local interval = DefineParameter(NumberType, 'interval', 'Used interval for price data. Default is 0 and the main interval will be used.', false, 0, 'Number,InputInterval')

DefineIntervalOptimization(interval)

-- Input fields for the indicator. Add the name in front.
InputGroupHeader('MadHatter BBands '..name)
local period = Input('BBands Length', 12) 
local devUp =  Input('BBands DevUp', 2) 
local devDn = Input('BBands DevDown', 2) 
local maType =  InputMaTypes('BBands MA Type', 'sma') 
local deviation = Input('BBands Deviation', 0.2) 
local requireFCC = Input('BBands Require FCC', false)
local resetMiddle = Input('BBands Reset Middle', false)
local allowMidSells = Input('BBands Allow Mid Sells', false)

-- Calculate the indicator
local prices = ClosePrices(interval)
local open = OpenPrices(interval)

local bbandsData = BBANDS(prices, period, devUp, devDn, maType)
local upper = bbandsData[1]
local middle = bbandsData[2]
local lower = bbandsData[3]

PlotBBandsChart(chartIndex, 'MHB BBands', upper, middle, lower)

local wentAbove = Load('wentAbove', false)
local wentBelow = Load('wentBelow', false)
local result = SignalNone

if prices < lower then
    wentBelow = true
    if resetMiddle == false then
        wentAbove = false
    end
end

if prices > lower and wentBelow then
    if requireFCC then
        if open > lower then
            result = SignalBuy
        end
    else
        result = SignalBuy
    end

    if resetMiddle == false then
        wentBelow = false
    end
end

if resetMiddle and prices > middle and wentBelow then
    wentBelow = false
end

if prices > upper then
    if resetMiddle == false then
        wentBelow = false
    end
    wentAbove = true
end

if prices < upper and wentAbove then
    if requireFCC then
        if open < upper then
            result = SignalSell
        end
    else
        result = SignalSell
    end

    if resetMiddle == false then
        wentAbove = false
    end
end

if resetMiddle and prices < middle and wentAbove then
    wentAbove = false
end

if allowMidSells and prices > middle then
    result = SignalSell
end

local finalSignal = SignalNone
if open < prices and result == SignalBuy then
    finalSignal = SignalBuy
elseif result == SignalSell then
    finalSignal = SignalSell
end

Save('wentAbove', wentAbove)
Save('wentBelow', wentBelow)

--Return the custom signal.
DefineOutput(EnumType, finalSignal, 'Signal result', 'TradeBotContainer, IndicatorContainer, Signal Helpers')
