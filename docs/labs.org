#+TITLE: Lab Management
#+AUTHOR: Your Organization
#+DATE: 2024

* Overview

Labs provide a powerful backtesting environment in HaasOnline Trading Server. They allow you to:

- Test trading strategies with historical data
- Optimize strategy parameters
- Analyze performance metrics
- Run multiple scenarios in parallel

* Lab Lifecycle

** Creation

Create a new lab instance with specific configuration:

#+begin_src python
from haaslib.model import CreateLabRequest

lab = api.create_lab(auth_executor, CreateLabRequest(
    script_id="your_script_id",
    name="Test Lab",
    account_id="your_account_id", 
    market=market_tag,
    interval=15,
    default_price_data_style="CandleStick"
))
#+end_src

** Parameter Configuration

Labs support various parameter types:

- Numeric (integers and decimals)
- Boolean flags
- String selections
- Custom options

Example of updating parameters:

#+begin_src python
from haaslib.lab import update_lab_parameter_ranges

# Update specific parameters
updated_lab = update_lab_parameter_ranges(
    executor=auth_executor,
    lab_id=lab.lab_id,
    randomize=True  # Automatically randomize within valid ranges
)
#+end_src

** Execution

Start a backtest over a specific time period:

#+begin_src python
from haaslib.model import StartLabExecutionRequest
from datetime import datetime, timedelta

end_time = int(datetime.now().timestamp())
start_time = end_time - (24 * 60 * 60)  # Last 24 hours

execution = api.start_lab_execution(
    auth_executor,
    StartLabExecutionRequest(
        lab_id=lab.lab_id,
        start_unix=start_time,
        end_unix=end_time,
        send_email=False
    )
)
#+end_src

** Monitoring

Monitor execution progress:

#+begin_src python
while True:
    details = api.get_lab_details(auth_executor, lab.lab_id)
    status = details.status
    
    if status == "COMPLETED":
        break
    elif status == "CANCELLED":
        handle_cancellation()
        break
        
    time.sleep(15)  # Poll every 15 seconds
#+end_src

** Results

Retrieve backtest results:

#+begin_src python
results = api.get_backtest_result(
    auth_executor,
    GetBacktestResultRequest(
        lab_id=lab.lab_id,
        next_page_id=0,
        page_lenght=100
    )
)
#+end_src

* Lab States

| Status    | Description                                |
|-----------+--------------------------------------------|
| CREATED   | Initial state after lab creation           |
| QUEUED    | Waiting in execution queue                 |
| RUNNING   | Currently executing backtest               |
| COMPLETED | Finished successfully                      |
| CANCELLED | Execution was manually or auto cancelled   |

* Best Practices

** Resource Management
1. Delete unused labs to free resources
2. Monitor execution timeouts
3. Handle long-running backtests appropriately
4. Validate market data availability
5. Use appropriate timeframes for your strategy

** Error Handling
1. Implement retry logic for transient failures
2. Handle QUEUED state timeouts
3. Properly clean up resources on failure
4. Validate parameters before submission
5. Monitor API rate limits

** Performance
1. Batch parameter updates when possible
2. Use appropriate polling intervals
3. Consider parallel lab executions
4. Cache frequently used data
5. Optimize time ranges for backtests

* API Operations

** Lab Management
- =create_lab()=: Create new lab instance
- =delete_lab()=: Remove existing lab
- =get_lab_details()=: Retrieve lab configuration
- =update_lab_details()=: Modify lab settings
- =get_all_labs()=: List all available labs

** Execution Control  
- =start_lab_execution()=: Begin backtest
- =cancel_lab_execution()=: Stop running backtest
- =get_lab_execution_update()=: Check execution status
- =get_backtest_result()=: Retrieve test results

** Parameter Management
- =update_lab_parameter_ranges()=: Modify parameter values
- =get_lab_parameters()=: Get current parameters
- =validate_parameters()=: Check parameter validity

* Common Issues

** Market Data
- Ensure market data is available for test period
- Validate exchange/market pair compatibility
- Check for sufficient price history

** Resource Limits
- Monitor concurrent lab execution limits
- Handle queue timeouts appropriately
- Manage storage space for results

** Parameter Optimization
- Start with reasonable parameter ranges
- Use appropriate step sizes
- Consider parameter dependencies