# pyHaasAPI Test Script Best Practices and How-To

## 1. Configuration and Credentials
- All test scripts and examples should use configuration from `config/settings.py`.
- `settings.py` loads values from your `.env` file (or environment variables).
- Example `.env` variables:
  - `API_HOST`, `API_PORT`, `API_EMAIL`, `API_PASSWORD`
- Always ensure your `.env` is up to date and present in the project root.

## 2. Where to Place Test Scripts
- **Unit tests:** Place in `tests/unit/` (for isolated, fast tests of individual functions/classes).
- **Integration tests:** Place in `tests/integration/` (for tests that require a running server or multiple components).
- **Performance tests:** Place in `tests/performance/` (for benchmarks, load, or stress tests).
- **Quick/manual tests or demos:** Place in `examples/`.
- Name test files descriptively, e.g., `test_account_management.py`, `test_market_data.py`.

## 3. Import Pattern and Authentication
- Always use:
  ```python
  from config import settings
  from pyHaasAPI import api
  ```
- For authentication, use:
  ```python
  executor = api.RequestsExecutor(
      host=settings.API_HOST,
      port=settings.API_PORT,
      state=api.Guest()
  ).authenticate(
      email=settings.API_EMAIL,
      password=settings.API_PASSWORD
  )
  ```
- This ensures all scripts use the same credentials and server info.
- If you need to load `.env` manually (rare, but for some examples):
  ```python
  from dotenv import load_dotenv
  load_dotenv()
  ```

## 4. Running Tests and Examples
- **From the project root:**
  ```sh
  python tests/test_account_functions.py
  python examples/simple_lab_cloning_example.py
  ```
- **As a module (recommended for integration/unit tests):**
  ```sh
  python -m tests.integration.test_account_management
  python -m tests.quick_account_test
  ```
- **With pytest (optional, for compatible tests):**
  ```sh
  pytest tests/unit/
  pytest tests/integration/
  ```
- **With unittest (if using unittest.TestCase):**
  ```sh
  python -m unittest discover tests/unit
  ```
- Always run from the project root, or set `PYTHONPATH=.` if running from subfolders.

## 5. Imports and Local Helpers
- For local utility modules (e.g., `test_utils.py`), use relative imports and ensure the directory has an `__init__.py` file.
  ```python
  from .test_utils import TestLogger
  ```
- For shared helpers across test folders, consider placing them in a `tests/common/` directory.

## 6. Debugging Imports and Authentication
- If you get import errors, make sure you are running from the project root or have set `PYTHONPATH=.`.
- If authentication fails, check your `.env` file and server status.
- If a test fails due to a missing API method, check if the method exists in `pyHaasAPI.api` and is supported by your server.
- Use print statements or logging for additional debug output.

## 7. Adding New Test Categories
- To add a new test category (e.g., `tests/e2e/`), create the folder and add an `__init__.py` file.
- Follow the same import and authentication patterns as above.

## 8. Example Test Script Template
```python
#!/usr/bin/env python3
from config import settings
from pyHaasAPI import api

def main():
    executor = api.RequestsExecutor(
        host=settings.API_HOST,
        port=settings.API_PORT,
        state=api.Guest()
    ).authenticate(
        email=settings.API_EMAIL,
        password=settings.API_PASSWORD
    )
    # ... your test logic ...

if __name__ == "__main__":
    main()
```

## 9. Example: Integration Test with Local Helper
```python
# tests/integration/test_account_management.py
from .test_utils import TestLogger
from config import settings
from pyHaasAPI import api

def test_account_management(logger: TestLogger):
    executor = api.RequestsExecutor(
        host=settings.API_HOST,
        port=settings.API_PORT,
        state=api.Guest()
    ).authenticate(
        email=settings.API_EMAIL,
        password=settings.API_PASSWORD
    )
    # ... test logic ...

if __name__ == "__main__":
    logger = TestLogger()
    test_account_management(logger)
    logger.print_category_summary("Account Management")
```

---

**Follow these guidelines for all new and existing test scripts to ensure consistency, reliability, and ease of use for all contributors.** 